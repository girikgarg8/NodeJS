====Intro to closures and callbacks video====

We are going to use setTimeout and setInterval functions for code demonstration.

setTimeout and setInterval are not functions defined by Javascript, as they are not present in the official ECMAScript documentation. But we are able to access these functions. 

How are we still able to access these functions? Will be answered in some lectures.

setTimeout is a function that helps to execute some task once after a certain timer

setInterval: It is a function that helps us to execute some task again and again after a given interval. (Example: there could be a usecase, where I want to check database periodically after some interval)

===What is a bacllback function===

Callback function is a function passed as an argument to another function, which is then invoked (called) inside the outer function to complete some kind of action or routinue, in mathematical terms it's f(g(x))

Arguments vs parameters? Argument is what the function expects, like fun(x) expects an argument but when we call fun(5), we are passing 5 as the parameter.

Callback is not just a concept in Javascript, even in languages like C++, we can pass a function to another function, using function pointers.

arr.mp(fn): it passes all the elements (one-by-one) of the given array as argument to the callback function.

Also, arr.map returns an array after calculating the results for all the arguments passed as arguments. See the code examples file to understand better. map function never modifies the original array.

Let's try to create a custom mapper funtion, which is a polyfill for map function in Javascript. Important interview question.

setTimeout(callbackTask,timeInMilliseconds)

Real life Use case of setTimeout function: in notyjs notifications, the popup appears for a particular time duration, and after that, the notification disappears

====Promises and callback Lecture====

Concept of closures: Technically, closures is a result of scoping mechanism in Javacript. Let's try to understand what is closure, with the help of code snippet in closure_demo1.js

The thing to wonder about in this code is that: the function fun is getting called after the function todo has already finsihed executing, so how is it able to access the task property from the function todo, even though the function todo has stopped executing? The answer lies in closures. 

See the image attached: https://drive.google.com/open?id=1sneg74yD_2jrAXjYJYeSbor7fbr045eh

This happens due to closures.

Closure is when a function remembers its lexical scope,(remembering lexical scope means whatever variables and functions were accessible in the lexical scope of that function) even htough the function may be execited outside of that lexical scope.

So, in the given example,the function fun is in the scope of function todo, and the function fun is executed outside the scope of todo.

How does scope resolution work in the above code example? 

the function todo is getting assigned the global scope, and the function fun is getting assigned the scope of function todo. Now by the property of closures, the function fun remembers its lexical scope (todo), so even though the function 'todo' may be called outside of the scope of function todo, it will still have access to the variables or functions (data members) defined in the lexical scope i.e. the scope of todo.

It;s important that todo is not getting snapshotted, we are not storing the value of variable, we are just remebering the lexical scope (i.e. the enclosing scope) (will be clear from the code examples, see demo1.js file)

One more thing to note here is that, (for example in the code snippet of demo1.js file), the variable todo from 'task' is not getting vanished after function execution, if there's a function which has closure with the outside scope, it will be able to access that variable from the lexical scope.


===Async nature of JS Lecture===

How JS handles async operations? (This is a very practical aspect of JS)

Languages like Java,C++ are multithreaded but Javascript is single-threaded.

Let's understand about async operations in real life applications:

1. Let's say I have built a Swiggy like app on Javascript, and I am using payment services from Razorpay, then I need to make an API call to Razorpay, let's say it takes 2 seconds to make an API call, so during these 2 seconds, should the app freeze? No, that's a very bad user experience

2. Let's say I am designing facebook like app on JS, and I hit the like button on a post, then I need to make a call to make the changes in the database as well, let's say it takes 3 seconds, again I can't let the app freeze, that would be a very bad experience. 


Javascript, by default, supports only synchronous code execution. (What I mean by synchornous is that: if there are 5 lines of code to be executed, and the 4th line of code requires me to wait 5 seconds, I will wait for 5 seconds and then move to the next line of code ) (See the sync_code_demo.js file)

IMPOTRTANT NOTE: Thr property of by default synchronous code execution works only for operations (like for loop, while loop etc but not setTimeout, setTimeout is not provided by the javascript, it is provided by browser) which are known to Javacript.


Let's talk about JS runtime environment: So, initially Jaavscript was intended to be used only on browsers, and browsers provided the JS runtime environment. In a layman term, I can say that JS alone is very weak, many of the powers to the JS come through the JS runtime environment. In the case of browsers, the browser provides access to Web APIs like DOM APIs (for example the document.getElementById is provided by the browser, it is not provided by Javascript itself), setTimeout, set Interval etc

one more important thing: JS engine is a component of JS runtime environment,so don't confuse between JS runtime environment and JS engine.

However, in 2009, the inventor of NodeJS (Ryan Dahl, need not to cram his name :P), used a runtime environment for JS, which was not the browser, and using this runtime environment, he got access to the file system (file handling with hard disk which we do in other languages too), process (the environment variable process which we have access to), and setTimeout (setTimeout in this case is provided by the OS functionality)


See these diagrams: https://drive.google.com/open?id=1W6qaAnI4abgMSIrdToLhwNj-Z-zHbasU
and https://drive.google.com/open?id=1Up42sbdCYnooqEADFVe7_e_OZt8BAlMM

Just a side note: When I execute the code using 'code runner' in VS Code, it actualy executes the command 'node index.js', so I am running the file inside Node runtime environment.

So, now we know that runtime also provides functionalities that can be leveraged by JS. But how does JS handle them? 

Now the question that arises: we can easily do tasks that take a lot of time to complete without blocking the code flow. How??

Let's understand with the code example from code_example.js file

Explantion of the code from that file: First of all, the global execution context is pushed into the call stack, (global execution stack is just a fancy name for the global scope code), and thereafter the process function is called (so it is pushed into the call stack), now the function process is executing, it will print "Start", when it sees the line setTimeout, it asks the runtime environment (NodeJS or browser), to  execute the code (Since core JS doesn't know how to execute setTimeout), and the core JS, goes to the for loop to execute. 

Now let us suppose that the for loop takes 8 seconds to execute, meanwhile at the end of 3 seconds, the timer would execute, so the runtime environment would tell the JS that the function execution hasd completed, but still JS wouldn't bother about it, (just like we don't listen to our mothers sometime :P), so the runtime environment would push the timer into the event queue.

Now the events are picked from the event queue by a process called event loop (event loop runs continuosly in the background), only when the call stack is completely empty, i.e. evene the global execution event is also not present inside the call stack.

See the attached diagram for the diagrammatic explanation of the concept: https://drive.google.com/open?id=1PXn_yHQg26KG-K4TDjADP-N3aUTfKKhv

===Lecture on Promise===

An interesting and important discussion about console.* statements in JS (like console.log and console.err)

== console.* statements are not a function of core JS, they are provided by the runtime environment (like Node runtime environment or the browser's runtime environment)

So, now the question is that since console.* is being provided by the browser, so is it also asynchronous like the setTimeout and setInterval functions, which are asynchronous and are being provided by the runtime environment?

Answer: NO, console.log is not always synchronous or asynchronous, it depends on the runtime envionment (so we can't give a concrete answer to whether the console.* is asynchronous or synchronous). Moreover, not every operation, performed by the runtime envionment is asynchronous in nature.

Explanation: Let us take the case of Node Runtime environment. In NodeJS runtime environment, using console.log internally calls proces.stdout function. Now from the documentation of console.* properties, https://nodejs.org/api/process.html#a-note-on-process-io, it is clear that for file system, it is synchronous for file system on both Windows and POSIX (loosely understand it as UNIX). But for TTY (TTY is a kind of legacy terminal), it is  asynchronous on Windows, synchronous on POSIX (loosely understand it as UNIX).

Applications of the fact that console.log is not asynchonrous in nature:

1) Many webpgaes ask you to visit their webpage on Chrome or Safari etc, because behavior of console.log is unpredictable in some other runtimes.

2) Many a times, in production applications, we use separate logging libtraries, because again, the behavior of console.log is not predictable.

3) Take the code example from console_log.js file, run it in browser, and expand the first x object, you'll get x:10, another reason why console.log shouldn't be used in production ready code (Similar thing happens in case of promises, it shows the promise to be fulfilled on expanding, even though the console.log statement says the promise to be pending) (this behaviour is because the browser substitutes the latest or current value of object on expanidng the object)

http://latentflip.com/loupe/ This is a nice tool to visualise call stack, callback queue and Web APIs in Javascript

What are the disadvantages of using callback?

Many people think that the major disadvantage of using callbacks is callback hell. It's partially true, but it is not the 'major' disadvantage of using callbacks, because even when using promises, we can encounter a situation of 'promise hell'.

1) Callback hell: It is the phenomenon where we pass callbacks to callbacks, which makes the code reability less, and also leads to pyramid of doom, see the example at: http://callbackhell.com/

2) Inversion of control: let's understand it through inversion_of_control.js file

So formally, inversion of control is when I have defined the logic of callback function, but I am not the one who is executing it. The call back function's logic is executed by some other function

Inversion of control is not always a problem, for example, in recursion, it's necessary

So, to solve the problem of inversion of control and callback hell, we introduced Promises in Javascript.

What is promise? From MDN documentation, Promise is a javascript object which indicates the eventual completion or failure of an asynchronous operation.

Sanket Sir's definition: Promises are special JS objects that are also considered readability enhancers. They get immediately returned from a function set up to return promises. 

They act as placeholder (kind of temporary variable) for data we hope to get back from some future task.

-We also attach the functionality, we want to defer (delay) until the future task is done. Promise automatically handles execution of functionality.

==See why_promise_callback_hell.js and why_callback_hell_2.js file. It will give an idea of why promises are required 